package com.sdase.malware.services;

import com.sdase.malware.interfaces.Producer;
import com.sdase.malware.model.CheckEvent;
import com.sdase.malware.model.FraudProtection;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;


@Slf4j
@Service
public class KafkaProducer implements Producer {

    @Value("${spring.kafka.template.default-topic}")
    private String topicName;

    @Autowired
    private KafkaTemplate<String, CheckEvent> fraudProtectionKafkaTemplate;

    @Override
    public void publishToTopic(FraudProtection message){
        log.info("publishing message to kafka topic::::{}", topicName);
        CheckEvent checkEvent = new CheckEvent();
        checkEvent.setFileType(message.getFileType());
        checkEvent.setUrl(message.getUrl());
        ListenableFuture<SendResult<String, CheckEvent>> future = fraudProtectionKafkaTemplate.send(topicName, checkEvent);

        future.addCallback(new ListenableFutureCallback<SendResult<String, CheckEvent>>() {
            @Override
            public void onFailure(Throwable ex) {
                log.error("unable to deliver message {}", ex.getMessage());
            }

            @Override
            public void onSuccess(SendResult<String, CheckEvent> result) {
                log.info("Message [{}] delivered, with offset {}", message, result.getRecordMetadata().offset());
            }
        });
    }
}
